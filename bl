#!/usr/bin/env python

# Copyright 2016 neurodata (http://neurodata.io/)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# bl
# Created by Disa Mhembere on 2016-10-25.
# Email: disa@jhu.edu

import argparse
import sys
from os.path import join

from include.bl_exceptions import ParameterException
from include.add import add
from include.init import init
from include.config import config
from include.build import trigger_build
from include.settings import BL_DEFAULT_CONFIG_FN

# Turn off stack trace when running live
# import sys
# sys.tracebacklimit = 0

__version__ = "0.0.1"

def get_version():
    """
    Get the version of the package

    **Returns**:

    The version number of the package
    """
    return __version__

class Parser(argparse.ArgumentParser):
    def error(self, message):
        self.print_help()
        sys.exit(2)

def main():
    parser = Parser(description="The BLCI CLI. Pass "
            "-h for help")
    parser.add_argument("projecthome", action="store", help="The root "
            "folder of the project")
    parser.add_argument("-i", "--init", action="store_true", help="Intiate "
            "a project with dependency and BLCI configuration file.")
    parser.add_argument("-a", "--add", action="store_true", help="Add or update"
            " AND commit a blci repo. Pass -m flag for personalized message")
    parser.add_argument("-u", "--undo", action="store_true", help="Undo "
            "the very last --add action")
    parser.add_argument("-m", "--message", action="store",
            default="BLCI: Generic commit message", help="A(n) --add message")
    parser.add_argument("-b", "--build", action="store_true",
            help="Trigger a build of BLCI")
    parser.add_argument("-o", "--overwrite", action="store_true", help=
            "Overwrite the config when performing actions? This will not remove"
            " old settings, but instead append & merge.")
    parser.add_argument("-B", "--bare", action="store_true", help="Scrap all "
            "configs and start afresh?")
    args = parser.parse_args()

    if args.init:
        init(args.projecthome, args.overwrite, args.bare)
    elif args.add:
        add(args.projecthome, args.message)
    elif args.build:
        trigger_build(config(join(args.projecthome,
            BL_DEFAULT_CONFIG_FN), args.projecthome), args.projecthome)
    else:
        raise NotImplementedError("Other methods incomplete!")

if __name__ == "__main__":
    main()
